// Generated by CoffeeScript 1.12.7
(function() {
  'use strict';
  var Upload,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Upload = (function() {
    function Upload(file) {
      this.setSuccess = bind(this.setSuccess, this);
      this.setError = bind(this.setError, this);
      this.setAlreadyUploaded = bind(this.setAlreadyUploaded, this);
      this.setS3Upload = bind(this.setS3Upload, this);
      this.setFinalize = bind(this.setFinalize, this);
      this.setBootstrap = bind(this.setBootstrap, this);
      this.progress = bind(this.progress, this);
      this.getTransmittedPercent = bind(this.getTransmittedPercent, this);
      this.isFinished = bind(this.isFinished, this);
      this.name = file.name;
      this.file = file;
      this.status = 'stalled';
      this.transmittedSize = 0;
      this.totalSize = file.size;
      this.id = null;
    }

    Upload.prototype.isFinished = function() {
      return this.status === 'error' || this.status === 'success' || this.status === 'already_uploaded';
    };

    Upload.prototype.getTransmittedPercent = function() {
      return this.transmittedSize * 100 / this.totalSize;
    };

    Upload.prototype.progress = function(transmitted, total) {
      this.transmittedSize = transmitted;
      return this.totalSize = total;
    };

    Upload.prototype.setBootstrap = function() {
      return this.status = 'bootstrap';
    };

    Upload.prototype.setFinalize = function() {
      return this.status = 'finalize';
    };

    Upload.prototype.setS3Upload = function() {
      return this.status = 's3_upload';
    };

    Upload.prototype.setAlreadyUploaded = function() {
      return this.status = 'already_uploaded';
    };

    Upload.prototype.setError = function(error) {
      this.status = 'error';
      return this.error = error;
    };

    Upload.prototype.setSuccess = function() {
      return this.status = 'success';
    };

    return Upload;

  })();

  angular.module('xin_uploadFile', ['appSettings', 'xin_s3uploadFile', 'xin.fileUploader']).directive('uploadFileDirective', function() {
    return {
      restrict: 'E',
      templateUrl: 'scripts/xin/upload_file/upload_file.html',
      controller: 'UploadFileController',
      scope: {
        lienParticipation: '@'
      },
      link: function(scope, elem, attrs) {
        var file_selector_elem, folder_selector_elem, form_elem;
        form_elem = elem.find('.selectors-form')[0];
        file_selector_elem = elem.find('.file-selector')[0];
        file_selector_elem.addEventListener('change', function() {
          var file, i, len, ref;
          ref = file_selector_elem.files;
          for (i = 0, len = ref.length; i < len; i++) {
            file = ref[i];
            scope.newUpload(file);
          }
          form_elem.reset();
          return scope.$apply();
        });
        folder_selector_elem = elem.find('.folder-selector')[0];
        return folder_selector_elem.addEventListener('change', function() {
          var file, i, len, ref;
          ref = folder_selector_elem.files;
          for (i = 0, len = ref.length; i < len; i++) {
            file = ref[i];
            scope.newUpload(file);
          }
          form_elem.reset();
          return scope.$apply();
        });
      }
    };
  }).controller('UploadFileController', function($scope, $http, Backend) {
    var already_uploaded_file_names, current_uploads_count, finalizeUpload, max_concurrent_uploads, registerUpload, s3Upload, startUpload, teardownUpload, waiting_uploads;
    $scope.upload_stats = {
      success: 0,
      errors: 0,
      ignored: 0,
      total: 0
    };
    max_concurrent_uploads = 5;
    current_uploads_count = 0;
    waiting_uploads = [];
    already_uploaded_file_names = [];
    Backend.all('participations').one($scope.lienParticipation, 'pieces_jointes').get().then(function(response) {
      var file, i, len, ref, results;
      ref = response._items;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        file = ref[i];
        if (file.disponible) {
          results.push(already_uploaded_file_names.push(file.titre));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }, function(error) {
      return console.log('Error fectching participation info', error);
    });
    registerUpload = function(file) {
      var ref, upload;
      upload = new Upload(file);
      current_uploads_count += 1;
      if (ref = upload.file.name, indexOf.call(already_uploaded_file_names, ref) >= 0) {
        upload.setAlreadyUploaded();
        teardownUpload(upload);
      } else if (current_uploads_count < max_concurrent_uploads + 1) {
        startUpload(upload);
      } else {
        current_uploads_count -= 1;
        waiting_uploads.push(upload);
      }
      return upload;
    };
    teardownUpload = function(upload) {
      $scope.upload_stats.total += 1;
      if (upload.status === 'success') {
        already_uploaded_file_names.push(upload.file.name);
        $scope.upload_stats.success += 1;
      } else if (upload.status === 'already_uploaded') {
        $scope.upload_stats.ignored += 1;
      } else {
        $scope.upload_stats.errors += 1;
      }
      current_uploads_count -= 1;
      upload = waiting_uploads.pop();
      if (upload) {
        startUpload(upload);
        return current_uploads_count += 1;
      }
    };
    startUpload = function(upload) {
      var payload;
      upload.setBootstrap();
      payload = {
        titre: upload.file.name,
        multipart: false,
        lien_participation: $scope.lienParticipation
      };
      return Backend.all('fichiers').post(payload).then(function(response) {
        upload.id = response._id;
        return s3Upload(upload, response.s3_signed_url, response.mime);
      }, function(error) {
        if (error.status === 409) {
          upload.setAlreadyUploaded();
          return teardownUpload(upload);
        } else {
          console.log('Upload bootstrap error', error);
          upload.setError("Erreur à l'initialisation de l'upload.");
          return teardownUpload(upload);
        }
      });
    };
    s3Upload = function(upload, s3_signed_url, mime) {
      var req;
      upload.setS3Upload();
      req = {
        method: 'PUT',
        url: s3_signed_url,
        withCredentials: true,
        uploadEventHandlers: {
          progress: function(e) {
            if (e.lengthComputable) {
              return upload.progress(e.loaded, e.total);
            }
          }
        },
        headers: {
          'Content-Type': mime
        },
        data: upload.file
      };
      return $http(req).success(function(data) {
        return finalizeUpload(upload);
      }).error(function(data, status) {
        console.log('Upload S3 unknown error', data, status);
        upload.setError("Erreur lors de l'upload vers S3.");
        return teardownUpload(upload);
      });
    };
    finalizeUpload = function(upload) {
      upload.setFinalize();
      return Backend.one('fichiers', upload.id).post().then(function(response) {
        upload.setSuccess();
        return teardownUpload(upload);
      }, function(error) {
        console.log('Upload finalize error', error);
        upload.setError("Erreur à la finalisation de l'upload.");
        return teardownUpload(upload);
      });
    };
    $scope.uploads = [];
    return $scope.newUpload = (function(_this) {
      return function(file) {
        var upload;
        console.log('New upload', file.name);
        upload = registerUpload(file);
        return $scope.uploads.push(upload);
      };
    })(this);
  });

}).call(this);
