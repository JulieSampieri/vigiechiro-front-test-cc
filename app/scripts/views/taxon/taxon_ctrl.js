// Generated by CoffeeScript 1.12.7
(function() {
  'use strict';
  var TaxonsParents, breadcrumbsGetTaxonDefer;

  breadcrumbsGetTaxonDefer = void 0;

  TaxonsParents = (function() {
    function TaxonsParents(Backend, currentTaxonId) {
      this.currentTaxonId = currentTaxonId;
      this.error = void 0;
      this.availableTaxons = [];
      this._initPromise = Backend.all('taxons').all('liste').getList();
    }

    TaxonsParents.prototype.init = function(callback) {
      return this._initPromise.then((function(_this) {
        return function(items) {
          if (_this.currentTaxonId != null) {
            _this.availableTaxons = items.filter(function(item) {
              return item._id !== _this.currentTaxonId;
            });
          } else {
            _this.availableTaxons = items;
          }
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    TaxonsParents.prototype.parseResponse = function(response) {
      if (response.status === 422 && response.data._error.message.match('^circular dependency')) {
        return this.error = true;
      }
    };

    TaxonsParents.prototype.datasToIds = function(datas) {
      var data, i, len, out;
      out = [];
      if (datas != null) {
        for (i = 0, len = datas.length; i < len; i++) {
          data = datas[i];
          out.push(data._id);
        }
      }
      return out;
    };

    return TaxonsParents;

  })();

  angular.module('taxonViews', ['ngRoute', 'ngSanitize', 'textAngular', 'ui.select', 'xin_listResource', 'xin_backend', 'xin_session', 'xin_tools']).config(function($routeProvider) {
    return $routeProvider.when('/taxons', {
      templateUrl: 'scripts/views/taxon/list_taxons.html',
      controller: 'ListTaxonsCtrl',
      breadcrumbs: 'Taxons'
    }).when('/taxons/nouveau', {
      templateUrl: 'scripts/views/taxon/edit_taxon.html',
      controller: 'CreateTaxonCtrl',
      breadcrumbs: 'Nouveau Taxon'
    }).when('/taxons/:taxonId', {
      templateUrl: 'scripts/views/taxon/display_taxon.html',
      controller: 'DisplayTaxonCtrl',
      breadcrumbs: ngInject(function($q) {
        var breadcrumbsDefer;
        breadcrumbsDefer = $q.defer();
        breadcrumbsGetTaxonDefer = $q.defer();
        breadcrumbsGetTaxonDefer.promise.then(function(taxon) {
          return breadcrumbsDefer.resolve([['Taxons', '#/taxons'], [taxon.libelle_long, '#/taxons/' + taxon._id]]);
        });
        return breadcrumbsDefer.promise;
      })
    }).when('/taxons/:taxonId/edition', {
      templateUrl: 'scripts/views/taxon/edit_taxon.html',
      controller: 'EditTaxonCtrl',
      breadcrumbs: ngInject(function($q) {
        var breadcrumbsDefer;
        breadcrumbsDefer = $q.defer();
        breadcrumbsGetTaxonDefer = $q.defer();
        breadcrumbsGetTaxonDefer.promise.then(function(taxon) {
          return breadcrumbsDefer.resolve([['Taxons', '#/taxons'], [taxon.libelle_long, '#/taxons/' + taxon._id], ['Ã‰dition', '#/taxons/' + taxon._id + '/edition']]);
        });
        return breadcrumbsDefer.promise;
      })
    });
  }).controller('ListTaxonsCtrl', function($scope, Backend, session, DelayedEvent) {
    var delayedFilter;
    session.getIsAdminPromise().then(function(isAdmin) {
      return $scope.isAdmin = isAdmin;
    });
    $scope.lookup = {};
    delayedFilter = new DelayedEvent(500);
    $scope.filterField = '';
    $scope.$watch('filterField', function(filterValue) {
      return delayedFilter.triggerEvent(function() {
        if ((filterValue != null) && filterValue !== '') {
          return $scope.lookup.q = filterValue;
        } else if ($scope.lookup.q != null) {
          return delete $scope.lookup.q;
        }
      });
    });
    return $scope.resourceBackend = Backend.all('taxons');
  }).controller('CreateTaxonCtrl', function($scope, Backend) {
    $scope.submitted = false;
    $scope.taxon = {
      parents: []
    };
    $scope.taxonsParents = new TaxonsParents(Backend, $scope.taxonId);
    $scope.taxonsParents.init();
    return $scope.saveTaxon = function() {
      var i, len, parent, parents, payload, ref;
      $scope.submitted = true;
      if (!$scope.taxonForm.$valid || !$scope.taxonForm.$dirty) {
        return;
      }
      parents = [];
      ref = $scope.taxon.parents;
      for (i = 0, len = ref.length; i < len; i++) {
        parent = ref[i];
        parents.push(parent._id);
      }
      payload = {
        'libelle_long': $scope.taxonForm.libelle_long.$modelValue,
        'libelle_court': $scope.taxonForm.libelle_court.$modelValue,
        'description': $scope.taxon.description,
        'parents': $scope.taxon.parents
      };
      return Backend.all('taxons').post(payload).then(function() {
        return window.location = '#/taxons';
      }, function(response) {
        return $scope.taxonsParents.parseResponse(response);
      });
    };
  }).controller('DisplayTaxonCtrl', function($routeParams, $scope, session, Backend) {
    $scope.taxon = {};
    $scope.taxonId = $routeParams.taxonId;
    $scope.isAdmin = false;
    session.getIsAdminPromise().then(function(isAdmin) {
      return $scope.isAdmin = isAdmin;
    });
    return Backend.one('taxons', $routeParams.taxonId).get().then(function(taxon) {
      if (breadcrumbsGetTaxonDefer != null) {
        breadcrumbsGetTaxonDefer.resolve(taxon);
        breadcrumbsGetTaxonDefer = void 0;
      }
      return $scope.taxon = taxon.plain();
    }, function(error) {
      return window.location = '#/404';
    });
  }).controller('EditTaxonCtrl', function($route, $routeParams, $scope, Backend) {
    var taxonResource;
    taxonResource = null;
    $scope.submitted = false;
    $scope.taxon = null;
    $scope.taxonsParents = new TaxonsParents(Backend, $routeParams.taxonId);
    $scope.taxonsParents.init(function() {
      return Backend.one('taxons', $routeParams.taxonId).get().then(function(taxon) {
        if (breadcrumbsGetTaxonDefer != null) {
          breadcrumbsGetTaxonDefer.resolve(taxon);
          breadcrumbsGetTaxonDefer = void 0;
        }
        taxonResource = taxon;
        taxon.parents = $scope.taxonsParents.datasToIds(taxon.parents);
        return $scope.taxon = taxon.plain();
      }, function(error) {
        return window.location = '#/404';
      });
    });
    return $scope.saveTaxon = function() {
      var key, payload, ref, value;
      $scope.submitted = true;
      if (!$scope.taxonForm.$valid || !$scope.taxonForm.$dirty || (taxonResource == null)) {
        return;
      }
      payload = {
        parents: $scope.taxon.parents
      };
      ref = $scope.taxonForm;
      for (key in ref) {
        value = ref[key];
        if (key.charAt(0) !== '$' && value.$dirty) {
          payload[key] = $scope.taxon[key];
        }
      }
      payload.description = $scope.taxon.description;
      return taxonResource.patch(payload).then(function() {
        return $route.reload();
      }, function(response) {
        return $scope.taxonsParents.parseResponse(response);
      });
    };
  });

}).call(this);
