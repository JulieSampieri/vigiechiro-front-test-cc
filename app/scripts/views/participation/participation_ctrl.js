// Generated by CoffeeScript 1.12.7
(function() {
  'use strict';
  var breadcrumbsGetParticipationDefer, traitement_is_timeout;

  breadcrumbsGetParticipationDefer = void 0;

  traitement_is_timeout = function(participation) {
    var now, timeout;
    if (!participation.traitement) {
      return;
    }
    now = new Date().getTime();
    timeout = 24 * 3600 * 1000;
    if (participation.traitement.etat === 'PLANIFIE') {
      return participation.traitement.timeout = (now - new Date(participation.traitement.date_planification).getTime()) > timeout;
    } else if (participation.traitement.etat === 'EN_COURS') {
      return participation.traitement.timeout = (now - new Date(participation.traitement.date_debut).getTime()) > timeout;
    } else {
      return participation.traitement.timeout = false;
    }
  };

  angular.module('participationViews', ['ngRoute', 'textAngular', 'xin_listResource', 'xin_backend', 'xin_session', 'xin_tools', 'xin_uploadFile', 'xin.form', 'modalParticipationViews', 'sc-button', 'protocole_map']).config(function($routeProvider) {
    return $routeProvider.when('/participations', {
      templateUrl: 'scripts/views/participation/list_participations.html',
      controller: 'ListParticipationsController',
      breadcrumbs: 'Participations'
    }).when('/participations/mes-participations', {
      templateUrl: 'scripts/views/participation/list_participations.html',
      controller: 'ListMesParticipationsController',
      breadcrumbs: 'Mes Participations'
    }).when('/sites/:siteId/nouvelle-participation', {
      templateUrl: 'scripts/views/participation/edit_participation.html',
      controller: 'EditParticipationController',
      breadcrumbs: ngInject(function($q, $filter) {
        var breadcrumbsDefer;
        breadcrumbsDefer = $q.defer();
        breadcrumbsGetParticipationDefer = $q.defer();
        breadcrumbsGetParticipationDefer.promise.then(function(site) {
          return breadcrumbsDefer.resolve([["Site " + site.titre, "#/sites/" + site._id], ["Nouvelle Participation"]]);
        });
        return breadcrumbsDefer.promise;
      })
    }).when('/participations/:participationId', {
      templateUrl: 'scripts/views/participation/display_participation.html',
      controller: 'DisplayParticipationController',
      breadcrumbs: ngInject(function($q, $filter) {
        var breadcrumbsDefer;
        breadcrumbsDefer = $q.defer();
        breadcrumbsGetParticipationDefer = $q.defer();
        breadcrumbsGetParticipationDefer.promise.then(function(participation) {
          return breadcrumbsDefer.resolve([['Participations', '#/participations'], ['Participation du ' + $filter('date')(participation.date_debut, 'medium'), '#/participations/' + participation._id]]);
        });
        return breadcrumbsDefer.promise;
      })
    }).when('/participations/:participationId/edition', {
      templateUrl: 'scripts/views/participation/edit_participation.html',
      controller: 'EditParticipationController',
      breadcrumbs: ngInject(function($q, $filter) {
        var breadcrumbsDefer;
        breadcrumbsDefer = $q.defer();
        breadcrumbsGetParticipationDefer = $q.defer();
        breadcrumbsGetParticipationDefer.promise.then(function(participation) {
          return breadcrumbsDefer.resolve([['Participations', '#/participations'], ['Participation du ' + $filter('date')(participation.date_debut, 'medium'), '#/participations/' + participation._id], ['Ã‰dition', '#/participations/' + participation._id + '/edition']]);
        });
        return breadcrumbsDefer.promise;
      })
    });
  }).controller('ListParticipationsController', function($scope, Backend, DelayedEvent, session) {
    var delayedFilter;
    $scope.title = "Toutes les participations";
    $scope.swap = {
      title: "Voir mes participations",
      value: "/mes-participations"
    };
    $scope.lookup = {
      sort: "-date_debut"
    };
    delayedFilter = new DelayedEvent(500);
    $scope.filterField = '';
    $scope.$watch('filterField', function(filterValue) {
      return delayedFilter.triggerEvent(function() {
        if ((filterValue != null) && filterValue !== '') {
          return $scope.lookup.q = filterValue;
        } else if ($scope.lookup.q != null) {
          return delete $scope.lookup.q;
        }
      });
    });
    return $scope.resourceBackend = Backend.all('participations');
  }).controller('ListMesParticipationsController', function($scope, Backend, DelayedEvent, session) {
    var delayedFilter;
    $scope.title = "Mes participations";
    $scope.swap = {
      title: "Voir toutes les participations",
      value: ""
    };
    $scope.lookup = {
      sort: "-date_debut"
    };
    delayedFilter = new DelayedEvent(500);
    $scope.filterField = '';
    $scope.$watch('filterField', function(filterValue) {
      return delayedFilter.triggerEvent(function() {
        if ((filterValue != null) && filterValue !== '') {
          return $scope.lookup.q = filterValue;
        } else if ($scope.lookup.q != null) {
          return delete $scope.lookup.q;
        }
      });
    });
    return $scope.resourceBackend = Backend.all('moi/participations');
  }).controller('DisplayParticipationController', function($scope, $route, $routeParams, $modal, Backend, session) {
    var participationResource, sortByLibelle;
    $scope.isCsvPost = null;
    participationResource = null;
    $scope.user = {};
    session.getUserPromise().then(function(user) {
      return $scope.user = user;
    });
    $scope.isAdmin = false;
    session.getIsAdminPromise().then(function(isAdmin) {
      return $scope.isAdmin = isAdmin;
    });
    Backend.one('participations', $routeParams.participationId).get().then(function(participation) {
      if (breadcrumbsGetParticipationDefer != null) {
        breadcrumbsGetParticipationDefer.resolve(participation);
        breadcrumbsGetParticipationDefer = void 0;
      }
      participationResource = participation;
      $scope.participation = participation.plain();
      traitement_is_timeout($scope.participation);
      if ($scope.participation.bilan != null) {
        if ($scope.participation.bilan.chiropteres != null) {
          $scope.participation.bilan.chiropteres.sort(sortByLibelle);
        }
        if ($scope.participation.bilan.orthopteres != null) {
          $scope.participation.bilan.orthopteres.sort(sortByLibelle);
        }
        if ($scope.participation.bilan.autre != null) {
          return $scope.participation.bilan.autre.sort(sortByLibelle);
        }
      }
    }, function(error) {
      return window.location = '#/404';
    });
    sortByLibelle = function(a, b) {
      var taxonA, taxonB;
      taxonA = a.taxon.libelle_long;
      taxonB = b.taxon.libelle_long;
      return taxonA.localeCompare(taxonB);
    };
    $scope.addPost = function() {
      var payload;
      payload = {
        message: $scope.post
      };
      return participationResource.customPUT(payload, 'messages').then(function() {
        return $route.reload();
      }, function(error) {
        throw error;
      });
    };
    $scope.computeDone = {};
    $scope.compute = function() {
      $scope.computeInfo = {};
      return participationResource.post('compute', {}).then(function(result) {
        return $route.reload();
      }, function(error) {
        var base;
        $scope.computeInfo.error = true;
        return typeof (base = $scope.computeDone).end === "function" ? base.end() : void 0;
      });
    };
    $scope["delete"] = function() {
      var modalInstance;
      modalInstance = $modal.open({
        templateUrl: 'scripts/views/participation/modal/delete.html',
        controller: 'ModalDeleteParticipationController'
      });
      return modalInstance.result.then(function() {
        return participationResource.remove().then(function() {
          return window.location = '#/participations';
        }, function(error) {
          throw error;
        });
      });
    };
    $scope.getEmailDone = {};
    //ajout de infoUpload pop up on click de "uploader les fichiers"
    $scope.infoUpload = function() {
      var modalInstance;
      modalInstance = $modal.open({
        templateUrl: 'scripts/views/participation/info_upload.html',
        controller: 'ModalInstanceControllerInfoUpload'
      });
    };
    return $scope.getDonnees = function() {
      return participationResource.post('csv').then(function() {
        var base;
        $scope.isCsvPost = true;
        return typeof (base = $scope.getEmailDone).end === "function" ? base.end() : void 0;
      }, function(error) {
        var base;
        $scope.isCsvPost = false;
        return typeof (base = $scope.getEmailDone).end === "function" ? base.end() : void 0;
      });
    };
  })
  .controller('ModalInstanceControllerInfoUpload', function($scope, $modalInstance) {
    $scope.closeModal = function() {
      $modalInstance.close();
    };
  }).directive('displayParticipationDirective', function(Backend) {
    return {
      restrict: 'E',
      controller: 'displayParticipationDrtController',
      templateUrl: 'scripts/views/participation/display_participation_drt.html',
      scope: {
        participation: '='
      },
      link: function(scope, elem, attrs) {
        return scope.isObjectEmpty = function(obj) {
          var length;
          if (!obj) {
            return false;
          }
          length = Object.keys(obj).length;
          if (length) {
            return false;
          }
          return true;
        };
      }
    };
  })
  .controller('displayParticipationDrtController', function($scope, Backend) {
    $scope.$watch('participation', function(participation) {
      if (participation != null) {
        return Backend.all('participations/' + $scope.participation._id + '/pieces_jointes').getList({
          photos: true
        }).then(function(photos) {
          return $scope.photos = photos.plain();
        });
      }
    });
    $scope.displayWavFiles = function() {
      if ($scope.wavBackend == null) {
        $scope.wavBackend = Backend.all('participations/' + $scope.participation._id + '/pieces_jointes');
      }
      if ($scope.wav_lookup == null) {
        return $scope.wav_lookup = {
          wav: true
        };
      }
    };
    $scope.displayTaFiles = function() {
      if ($scope.taBackend == null) {
        $scope.taBackend = Backend.all('participations/' + $scope.participation._id + '/pieces_jointes');
      }
      if ($scope.ta_lookup == null) {
        return $scope.ta_lookup = {
          ta: true
        };
      }
    };
    $scope.displayTcFiles = function() {
      if ($scope.tcBackend == null) {
        $scope.tcBackend = Backend.all('participations/' + $scope.participation._id + '/pieces_jointes');
      }
      if ($scope.tc_lookup == null) {
        return $scope.tc_lookup = {
          tc: true
        };
      }
    };
    return $scope.displayProcessingExtraFiles = function() {
      if ($scope.processingExtraBackend == null) {
        $scope.processingExtraBackend = Backend.all('participations/' + $scope.participation._id + '/pieces_jointes');
      }
      if ($scope.processing_extra_lookup == null) {
        return $scope.processing_extra_lookup = {
          processing_extra: true
        };
      }
    };

  }).controller('EditParticipationController', function($scope, $route, $routeParams, Backend) {
    var makeConfiguration, makeMeteo, participationResource, siteResource, giteResource; //ajout
    participationResource = null;
    siteResource = null;
   // giteResource = null; //ajout
    $scope.participation = null;
    $scope.site = null;
    $scope.protocole = null;
    $scope.saveDone = {};
    //Nouvelle participation
    if ($routeParams.siteId != null) {
      Backend.one('sites', $routeParams.siteId).get().then(function(site) {
        if (breadcrumbsGetParticipationDefer != null) {
          breadcrumbsGetParticipationDefer.resolve(site);
          breadcrumbsGetParticipationDefer = void 0;
        }
        siteResource = site;
       // giteResource = gite; //ajout
        $scope.site = site.plain();
        $scope.protocole = $scope.site.protocole;
        return $scope.participation = {
          meteo: makeMeteo(),
          configuration: makeConfiguration($scope.protocole.type_site)
        };
      }, function(error) {
        return window.location = '#/404';
      });
      //Edition participation #ici il y a peut etre un ajout a faire pour gite
    } else if ($routeParams.participationId != null) {
      Backend.one('participations', $routeParams.participationId).get().then(function(participation) {
        if (breadcrumbsGetParticipationDefer != null) {
          breadcrumbsGetParticipationDefer.resolve(participation);
          breadcrumbsGetParticipationDefer = void 0;
        }
        participationResource = participation;
        $scope.participation = participation.plain();
        traitement_is_timeout($scope.participation);
        $scope.participation.meteo = makeMeteo($scope.participation.meteo);
        $scope.site = $scope.participation.site;
        return Backend.one('protocoles', $scope.site.protocole).get().then(function(protocole) {
          $scope.protocole = protocole.plain();
          return $scope.participation["configuration"] = makeConfiguration(protocole.type_site, $scope.participation.configuration);
        });
      }, function(error) {
        return window.location = '#/404';
      });
    }
    makeMeteo = function(meteo) {
      if (meteo == null) {
        meteo = {};
      }
      meteo.temperature_debut = meteo.temperature_debut;
      meteo.temperature_fin = meteo.temperature_fin;
      meteo.vent = meteo.vent;
      meteo.couverture = meteo.couverture;
      return meteo;
    };
    makeConfiguration = function(type_site, configuration) {
      if (configuration == null) {
        configuration = {};
      }
      configuration.detecteur_enregistreur_numero_serie = configuration.detecteur_enregistreur_numero_serie;
      configuration.detecteur_enregistreur_type = configuration.detecteur_enregistreur_type;
      if (type_site === 'ROUTIER' || type_site === 'CARRE') {
        configuration.micro_numero_serie = configuration.micro_numero_serie;
        configuration.micro_type = configuration.micro_type;
        configuration.canal_expansion_temps = configuration.canal_expansion_temps;
        configuration.canal_enregistrement_direct = configuration.canal_enregistrement_direct;
      } else if (type_site === 'POINT_FIXE') {
        configuration.micro0_position = configuration.micro0_position;
        configuration.micro0_numero_serie = configuration.micro0_numero_serie;
        configuration.micro0_type = configuration.micro0_type;
        configuration.micro0_hauteur = configuration.micro0_hauteur;
        configuration.micro1_position = configuration.micro1_position;
        configuration.micro1_numero_serie = configuration.micro1_numero_serie;
        configuration.micro1_type = configuration.micro1_type;
        configuration.micro1_hauteur = configuration.micro1_hauteur;
      }
      return configuration;
    };
    return $scope.save = function() {
      var base, date_debut, date_fin, error, payload;
      $scope.participation._errors = {};
      error = false;
      payload = {};
      if ($scope.participation.date_debut != null) {
        date_debut = new Date($scope.participation.date_debut);
        payload.date_debut = date_debut.toGMTString();
      } else {
        error = true;
        $scope.participation._errors.date_debut = "La date de dÃ©but est obligatoire. ";
      }
      if ($scope.participation.date_fin != null) {
        date_fin = new Date($scope.participation.date_fin);
        if (date_fin < date_debut) {
          error = true;
          $scope.participation._errors.date_fin = "La date de fin ne peut pas Ãªtre plus rÃ©cente que celle de dÃ©but.";
        } else {
          payload.date_fin = date_fin.toGMTString();
        }
      } else {
        error = true;
        $scope.participation._errors.date_fin = "La date de fin est obligatoire. ";
      }
      
      
      //ajout du point en obligatoire
      if ($scope.participation.point != undefined) {
        payload.point = $scope.participation.point;
      } else {
        error = true;
        $scope.participation._errors.point = "Le point est obligatoire. ";
      }
      
      payload.point = $scope.participation.point || void 0;
      payload.commentaire = $scope.participation.commentaire;
     // payload.gite = $scope.participation.gite; //ajout
      payload.meteo = $scope.participation.meteo;

      //ajout du detecteur en obligatoire
      if ($scope.participation.configuration.detecteur_enregistreur_numero_serie != null && $scope.participation.configuration.detecteur_enregistreur_numero_serie !== ""
      && $scope.participation.configuration.detecteur_enregistreur_type != null && $scope.participation.configuration.detecteur_enregistreur_type !== "") 
            {
              payload.configuration = $scope.participation.configuration;
            } else {
              error = true;
              if ($scope.participation.configuration.detecteur_enregistreur_numero_serie == null || $scope.participation.configuration.detecteur_enregistreur_numero_serie == ""){
                $scope.participation._errors.numDetecteur = "Le numÃ©ro de sÃ©rie du dÃ©tecteur enregistreur est obligatoire. ";
              } 
              if ($scope.participation.configuration.detecteur_enregistreur_type == null || $scope.participation.configuration.detecteur_enregistreur_type == "") {
                $scope.participation._errors.typeDetecteur = "Le type du dÃ©tecteur enregistreur est obligatoire. ";
              }
              
            }

      payload.configuration = $scope.participation.configuration;
      if ((payload.configuration.canal_expansion_temps != null) && payload.configuration.canal_expansion_temps !== '') {
        if (!payload.configuration.canal_enregistrement_direct || payload.configuration.canal_enregistrement_direct === '') {
          $scope.canal_enregistrement_direct_error = true;
          error = true;
        }
      } else {
        if (payload.configuration.canal_enregistrement_direct && payload.configuration.canal_enregistrement_direct !== '') {
          $scope.canal_enregistrement_direct_error = true;
          error = true;
        }
      }

      if (!error) {
        if ($scope.participation._id != null) {
          return participationResource.patch(payload).then(function(participation) {
            return $route.reload();
          }, function(error) {
            var base;
            console.log("Error : participation save " + error);
            return typeof (base = $scope.saveDone).end === "function" ? base.end() : void 0;
          });
        } else {
          return siteResource.post('participations', payload).then(function(participation) {
            return window.location = '#/participations/' + participation._id;
          }, function(error) {
            var base;
            if (typeof (base = $scope.saveDone).end === "function") {
              base.end();
            }
            return $scope.submitError = true;
          });
        }
      } else {
        return typeof (base = $scope.saveDone).end === "function" ? base.end() : void 0;
      }
    };
  }).directive('editParticipationDirective', function() {
    return {
      restrict: 'E',
      templateUrl: 'scripts/views/participation/edit_participation_drt.html',
      scope: {
        participation: '=',
        typeSite: '=',
        site: '='
      },
      link: function(scope) {
        scope.localities = [];
        return scope.$watch('site', function(site) {
          var i, len, localite, ref, results;
          if ((site != null) && (site.localites != null)) {
            ref = site.localites;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              localite = ref[i];
              results.push(scope.localities.push(localite.nom));
            }
            return results;
          }
        });
      }
    };
  });

}).call(this);
