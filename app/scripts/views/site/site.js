// Generated by CoffeeScript 1.12.7
(function() {
  'use strict';
  var breadcrumbsGetSiteDefer, extractSiteSaveError, initEnv, lock, map, saveLocalities, siteCallbacks,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  breadcrumbsGetSiteDefer = void 0;

  map = null;

  extractSiteSaveError = function(error) {
    var msg, ref;
    msg = (ref = error.data) != null ? ref._errors : void 0;
    if (!msg) {
      return null;
    } else if (msg === "protocole registration not yet validated") {
      return "Votre inscription au protocole n'a pas encore été validée.";
    } else {
      return msg;
    }
  };

  initEnv = function($scope, $modal, session) {
    $scope.saveDone = {};
    $scope.resetFormAllowed = false;
    $scope.site = {
      titre: "Nouveau site"
    };
    $scope.displaySteps = false;
    $scope.randomSelectionAllowed = false;
    $scope.validOriginAllowed = false;
    $scope.retrySelectionAllowed = false;
    $scope.isRandom = false;
    $scope.listGrilleStocOrigin = [];
    $scope.listNumberUsed = [];
    $scope.validTraceAllowed = false;
    $scope.validSegmentsAllowed = false;
    $scope.editSegmentsAllowed = false;
    $scope.routeLength = 0;
    $scope.validLocalitesAllowed = false;
    $scope.editLocalitesAllowed = false;
    $scope.mapWarnings = [];
    $scope.isAdmin = false;
    session.getIsAdminPromise().then(function(isAdmin) {
      return $scope.isAdmin = isAdmin;
    });
    $scope.validLocalities = function() {
      return map.validLocalities();
    };
    $scope.editLocalities = function() {
      return map.editLocalities();
    };
    $scope.validRoute = function() {
      map.validRoute();
      return map.validBounds();
    };
    $scope.editRoute = function() {
      var modalInstance;
      modalInstance = $modal.open({
        templateUrl: 'scripts/views/site/modal/edit_route.html',
        controller: 'ModalInstanceEditRouteController'
      });
      return modalInstance.result.then(function(valid) {
        if (valid) {
          return map.editRoute();
        }
      });
    };
    $scope.extendRouteTo = 'END';
    $scope.$watch('extendRouteTo', function(value) {
      if ((value != null) && (map != null)) {
        return map.extendRouteTo = value;
      }
    });
    $scope.validSections = function() {
      return map.validSections();
    };
    $scope.editSections = function() {
      return map.editSections();
    };
    return $scope.strikeStep = function(index, stepId, steps) {
      var i, j, ref;
      for (i = j = 0, ref = index; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        if (stepId === steps[i].id) {
          return false;
        }
      }
      return true;
    };
  };

  siteCallbacks = function($scope, $timeout) {
    return {
      displayError: function(error) {
        $scope.mapError = {
          message: error
        };
        return $timeout(function() {
          return $scope.$apply();
        });
      },
      displayWarning: function(warning, type) {
        var exist, j, len, newWarning, ref;
        if (type == null) {
          type = '';
        }
        exist = false;
        newWarning = {
          message: warning,
          type: type
        };
        ref = $scope.mapWarnings;
        for (j = 0, len = ref.length; j < len; j++) {
          warning = ref[j];
          if (warning.message === newWarning.message) {
            exist = true;
            break;
          }
        }
        if (!exist) {
          $scope.mapWarnings.push(newWarning);
        }
        return $timeout(function() {
          return $scope.$apply();
        });
      },
      hideWarning: function(type) {
        var i, j, ref;
        for (i = j = ref = $scope.mapWarnings.length - 1; ref <= 0 ? j <= 0 : j >= 0; i = ref <= 0 ? ++j : --j) {
          if ($scope.mapWarnings.length > 0) {
            if ($scope.mapWarnings[i].type === type) {
              $scope.mapWarnings.splice(i, 1);
            }
          }
        }
        return $timeout(function() {
          return $scope.$apply();
        });
      },
      updateSteps: function(steps, isOpportuniste) {
        var ref;
        $scope.mapError = null;
        $scope.steps = steps.steps;
        $scope.stepId = steps.step;
        if ((ref = $scope.protocole.type_site) === 'CARRE' || ref === 'POINT_FIXE') {
          if ($scope.stepId === 'start') {
            $scope.validLocalitiesAllowed = false;
          }
          if ($scope.stepId === 'editLocalities') {
            if (isOpportuniste || !$scope.isRandom) {
              $scope.retrySelectionAllowed = false;
            } else {
              $scope.retrySelectionAllowed = true;
            }
            $scope.editLocalitiesAllowed = false;
            $scope.validLocalitiesAllowed = false;
          }
          if ($scope.stepId === 'validLocalities') {
            $scope.retrySelectionAllowed = false;
            $scope.validLocalitiesAllowed = true;
            $scope.editLocalitiesAllowed = false;
          } else if ($scope.stepId === 'end') {
            $scope.validLocalitiesAllowed = false;
            $scope.editLocalitiesAllowed = true;
          }
        } else if ($scope.protocole.type_site === 'ROUTIER') {
          if ($scope.stepId === 'start') {
            if (map.hasRoute()) {
              $scope.validRouteAllowed = true;
            } else {
              $scope.validRouteAllowed = false;
            }
            $scope.editRouteAllowed = false;
            $scope.validSectionsAllowed = false;
            $scope.editSectionsAllowed = false;
          }
          if ($scope.stepId === 'selectOrigin') {
            $scope.validRouteAllowed = false;
            $scope.editRouteAllowed = true;
          }
          if ($scope.stepId === 'editSections') {
            $scope.validSectionsAllowed = true;
            $scope.editSectionsAllowed = false;
          }
          if ($scope.stepId === 'end') {
            $scope.validSectionsAllowed = false;
            $scope.editSectionsAllowed = true;
          }
        }
        return $timeout(function() {
          return $scope.$apply();
        });
      },
      updateLength: function(length) {
        $scope.routeLength = length;
        return $timeout(function() {
          return $scope.$apply();
        });
      }
    };
  };

  saveLocalities = function(site, callbacks) {
    var j, len, localite, localities, payload, tmp;
    if (callbacks == null) {
      callbacks = {};
    }
    localities = map.saveMap();
    payload = {
      localites: []
    };
    for (j = 0, len = localities.length; j < len; j++) {
      localite = localities[j];
      tmp = {
        nom: localite.name,
        geometries: localite.geometries,
        representatif: false
      };
      payload.localites.push(tmp);
    }
    return site.customPUT(payload, "localites").then(function() {
      return typeof callbacks.onSaveLocalitiesSuccess === "function" ? callbacks.onSaveLocalitiesSuccess() : void 0;
    }, function(error) {
      return typeof callbacks.onSaveLocalitiesFail === "function" ? callbacks.onSaveLocalitiesFail(error) : void 0;
    });
  };

  lock = function(site, callbacks) {
    if (callbacks == null) {
      callbacks = {};
    }
    return site.patch({
      'verrouille': true
    }).then(function() {
      return typeof callbacks.onLockSuccess === "function" ? callbacks.onLockSuccess() : void 0;
    }, function(error) {
      return console.log(error);
    });
  };

  angular.module('siteViews', ['ngRoute', 'textAngular', 'ui.bootstrap', 'protocole_map', 'modalSiteViews', 'frapontillo.bootstrap-switch']).config(function($routeProvider) {
    return $routeProvider.when('/protocoles/:protocoleId/nouveau-site', {
      templateUrl: 'scripts/views/site/edit_site.html',
      controller: 'CreateSiteController',
      breadcrumbs: ngInject(function($q) {
        var breadcrumbsDefer;
        breadcrumbsDefer = $q.defer();
        breadcrumbsGetSiteDefer = $q.defer();
        breadcrumbsGetSiteDefer.promise.then(function(protocole) {
          return breadcrumbsDefer.resolve([['Protocoles', '#/protocoles'], [protocole.titre, '#/protocoles/' + protocole._id], ['Nouveau Site', '#/protocoles/' + protocole._id + '/nouveau-site']]);
        });
        return breadcrumbsDefer.promise;
      })
    }).when('/sites/:siteId/edition', {
      templateUrl: 'scripts/views/site/edit_site.html',
      controller: 'EditSiteController',
      breadcrumbs: ngInject(function($q) {
        var breadcrumbsDefer;
        breadcrumbsDefer = $q.defer();
        breadcrumbsGetSiteDefer = $q.defer();
        breadcrumbsGetSiteDefer.promise.then(function(site) {
          return breadcrumbsDefer.resolve([['Sites', '#/sites'], [site.titre, '#/sites/' + site._id], ['Édition', '#/sites/' + site._id + '/edition']]);
        });
        return breadcrumbsDefer.promise;
      })
    });
  }).controller('CreateSiteController', function($timeout, $route, $scope, $routeParams, $modal, session, Backend, protocolesFactory) {
    var createMap, firstSelection, getExistingSites, initSiteCreation, justification_non_aleatoire, saveSiteRoutier, sites;
    initEnv($scope, $modal, session);
    $scope.creation = true;
    $scope.loading = false;
    sites = [];
    justification_non_aleatoire = [];
    Backend.one('protocoles', $routeParams.protocoleId).get().then(function(protocole) {
      if (breadcrumbsGetSiteDefer != null) {
        breadcrumbsGetSiteDefer.resolve(protocole);
        breadcrumbsGetSiteDefer = void 0;
      }
      $scope.protocole = protocole.plain();
      initSiteCreation();
      return createMap(angular.element('.g-maps')[0]);
    }, function(error) {
      return window.location = '#/404';
    });
    initSiteCreation = function() {
      var ref;
      if ((ref = $scope.protocole.type_site) === 'CARRE' || ref === 'POINT_FIXE') {
        $scope.site.generee_aleatoirement = false;
        return $scope.randomSelectionAllowed = true;
      } else {
        return $scope.displaySteps = true;
      }
    };
    createMap = function(mapDiv) {
      var ref;
      map = protocolesFactory(mapDiv, $scope.protocole.type_site, siteCallbacks($scope, $timeout));
      map.updateSite();
      if ((ref = $scope.protocole.type_site) === 'CARRE' || ref === 'POINT_FIXE') {
        $scope.loading = true;
        return getExistingSites(1);
      }
    };
    getExistingSites = function(page) {
      return Backend.all("protocoles/" + $scope.protocole._id + "/sites").all('grille_stoc').getList({
        page: page,
        max_results: 2000
      }).then(function(sitesResult) {
        sites = sites.concat(sitesResult.plain());
        if (sitesResult._meta.page * sitesResult._meta.max_results < sitesResult._meta.total) {
          return getExistingSites(page + 1);
        } else {
          $scope.loading = false;
          return map.displaySites(sites);
        }
      });
    };
    $scope.resetForm = function() {
      var ref;
      if (!confirm("Cette opération supprimera toute la carte.")) {
        return;
      }
      map.clear();
      $scope.resetFormAllowed = false;
      $scope.displaySteps = false;
      if ((ref = $scope.protocole.type_site) === 'CARRE' || ref === 'POINT_FIXE') {
        $scope.randomSelectionAllowed = true;
      }
      $scope.validOriginAllowed = false;
      $scope.retrySelectionAllowed = false;
      $scope.validLocalitiesAllowed = false;
      $scope.editLocalitiesAllowed = false;
      $scope.validRouteAllowed = false;
      $scope.editRouteAllowed = false;
      $scope.validSectionsAllowed = false;
      $scope.editSectionsAllowed = false;
      $scope.listGrilleStocOrigin = [];
      return $scope.listNumberUsed = [];
    };
    $scope.randomSelection = function(random) {
      $scope.resetFormAllowed = true;
      $scope.displaySteps = true;
      $scope.randomSelectionAllowed = false;
      if (random) {
        $scope.isRandom = true;
        map.createOriginPoint();
        return $scope.validOriginAllowed = true;
      } else {
        $scope.isRandom = false;
        return map.selectGrilleStoc();
      }
    };
    $scope.validOrigin = function() {
      var origin, parameters;
      $scope.validOriginAllowed = false;
      $scope.retrySelectionAllowed = true;
      origin = map.getOrigin();
      parameters = {
        lat: origin.getCenter().lat(),
        lng: origin.getCenter().lng(),
        r: origin.getRadius()
      };
      return Backend.all('grille_stoc/cercle').getList(parameters).then(function(grille_stoc) {
        $scope.listGrilleStocOrigin = grille_stoc.plain();
        return Backend.all('protocoles/' + $scope.protocole._id + '/sites').all('grille_stoc').getList().then(function(grille_stoc) {
          var cell, index, j, k, len, ref, ref1, site;
          if ($scope.listGrilleStocOrigin && sites) {
            for (index = j = ref = $scope.listGrilleStocOrigin.length - 1; ref <= 0 ? j <= 0 : j >= 0; index = ref <= 0 ? ++j : --j) {
              ref1 = sites || [];
              for (k = 0, len = ref1.length; k < len; k++) {
                site = ref1[k];
                cell = $scope.listGrilleStocOrigin[index];
                if (cell.numero === site.grille_stoc.numero) {
                  $scope.listGrilleStocOrigin.splice(index, 1);
                  break;
                }
              }
            }
          }
          return firstSelection();
        });
      });
    };
    firstSelection = function() {
      var number;
      number = Math.floor(Math.random() * $scope.listGrilleStocOrigin.length);
      $scope.listNumberUsed.push(number);
      return map.validOrigin($scope.listGrilleStocOrigin[number]);
    };
    $scope.retrySelection = function() {
      var modalInstance;
      modalInstance = $modal.open({
        templateUrl: 'scripts/views/site/modal/retry_selection.html',
        controller: 'ModalInstanceRetrySelectionController',
        resolve: {
          justification_non_aleatoire: function() {
            return justification_non_aleatoire;
          }
        }
      });
      return modalInstance.result.then(function(motif) {
        var grille_stoc, number;
        if (motif && motif !== '') {
          if ($scope.listNumberUsed.length === $scope.listGrilleStocOrigin.length) {
            $scope.randomSelectionAllowed = false;
            $scope.mapError = {
              message: "Plus de grille_stoc disponible."
            };
            $timeout(function() {
              return $scope.$apply();
            });
            return;
          }
          grille_stoc = $scope.listGrilleStocOrigin[$scope.listNumberUsed[$scope.listNumberUsed.length - 1]];
          justification_non_aleatoire.push(grille_stoc.numero + ' : ' + motif);
          map.emptyMap();
          map.deleteGrilleStoc();
          number = Math.floor(Math.random() * $scope.listGrilleStocOrigin.length);
          while ((indexOf.call($scope.listNumberUsed, number) >= 0)) {
            number = Math.floor(Math.random() * $scope.listGrilleStocOrigin.length);
          }
          $scope.listNumberUsed.push(number);
          return map.validOrigin($scope.listGrilleStocOrigin[number]);
        }
      });
    };
    $scope.save = function() {
      var base, callback_factory, check, j, justification, k, len, payload, ref, ref1, results;
      if (!map.isValid()) {
        if (typeof (base = $scope.saveDone).end === "function") {
          base.end();
        }
        return;
      }
      payload = {
        'titre': void 0,
        'protocole': $scope.protocole._id,
        'commentaire': $scope.site.commentaire
      };
      if (justification_non_aleatoire.length > 0) {
        payload.generee_aleatoirement = true;
        payload.justification_non_aleatoire = '';
        for (j = 0, len = justification_non_aleatoire.length; j < len; j++) {
          justification = justification_non_aleatoire[j];
          payload.justification_non_aleatoire += justification + '\n';
        }
      }
      callback_factory = function(site) {
        return {
          onSaveLocalitiesSuccess: function() {
            return window.location = '#/sites/' + site._id;
          },
          onSaveLocalitiesFail: function() {
            var base1;
            $scope.saveLocalitiesError = true;
            return typeof (base1 = $scope.saveDone).end === "function" ? base1.end() : void 0;
          }
        };
      };
      if ((ref = $scope.protocole.type_site) === 'POINT_FIXE' || ref === 'CARRE') {
        payload.grille_stoc = map.getIdGrilleStoc();
        check = {
          protocole: $scope.protocole._id,
          grille_stoc: map.getIdGrilleStoc()
        };
        return Backend.all('sites').getList(check).then(function(sites) {
          var numGrilleStoc, sixDigitGrilleStoc;
          if (sites.plain().length) {
            return saveLocalities(sites[0], callback_factory(sites[0]));
          } else {
            numGrilleStoc = map.getNumGrilleStoc();
            sixDigitGrilleStoc = '000000'.substring(0, 6 - numGrilleStoc.length) + numGrilleStoc;
            payload.titre = $scope.protocole.titre + "-" + sixDigitGrilleStoc;
            return Backend.all('sites').post(payload).then(function(site) {
              if ($scope.site.verrouille) {
                lock(site);
              }
              return saveLocalities(site, callback_factory(site));
            }, function(error) {
              var base1;
              $scope.mapError = {
                message: extractSiteSaveError(error)
              };
              return typeof (base1 = $scope.saveDone).end === "function" ? base1.end() : void 0;
            });
          }
        });
      } else if ($scope.protocole.type_site === 'ROUTIER') {
        payload.tracet = map.getGeoJsonRoute();
        if (($scope.site.numeroSite != null) && (ref1 = $scope.site.numeroSite, indexOf.call((function() {
          results = [];
          for (k = 0; k <= 599; k++){ results.push(k); }
          return results;
        }).apply(this), ref1) >= 0)) {
          payload.titre = $scope.protocole.titre + "-" + $scope.site.numeroSite;
          return Backend.all('sites').getList({
            protocole: $routeParams.protocoleId
          }).then(function(sites) {
            var exist, l, len1, ref2, site;
            exist = false;
            ref2 = sites.plain() || [];
            for (l = 0, len1 = ref2.length; l < len1; l++) {
              site = ref2[l];
              if (site.titre === payload.titre) {
                exist = true;
                break;
              }
            }
            if (exist) {
              return $scope.numeroError = true;
            } else {
              return saveSiteRoutier(payload, callback_factory);
            }
          });
        } else {
          return saveSiteRoutier(payload, callback_factory);
        }
      }
    };
    return saveSiteRoutier = function(payload, callback_factory) {
      return Backend.all('sites').post(payload).then(function(site) {
        return saveLocalities(site, callback_factory(site));
      }, function(error) {
        var base;
        $scope.mapError = {
          message: extractSiteSaveError(error)
        };
        return typeof (base = $scope.saveDone).end === "function" ? base.end() : void 0;
      });
    };
  }).controller('EditSiteController', function($timeout, $route, $routeParams, $scope, $modal, session, Backend, protocolesFactory) {
    var getUsers, initSiteCreation, loadMap, site;
    initEnv($scope, $modal, session);
    $scope.creation = false;
    $scope.site_orig = {};
    site = null;
    $scope.users = [];
    getUsers = function(page) {
      var payload;
      payload = {
        page: page,
        max_results: 50
      };
      return Backend.all('utilisateurs').getList(payload).then(function(users) {
        $scope.users = $scope.users.concat(users.plain());
        if (users._meta.page * users._meta.max_results < users._meta.total) {
          return getUsers(page + 1);
        }
      });
    };
    getUsers(1);
    Backend.one('sites', $routeParams.siteId).get().then(function(siteResult) {
      site = siteResult;
      $scope.site = site.plain();
      if (breadcrumbsGetSiteDefer != null) {
        breadcrumbsGetSiteDefer.resolve($scope.site);
        breadcrumbsGetSiteDefer = void 0;
      }
      angular.copy($scope.site, $scope.site_orig);
      $scope.protocole = site.protocole;
      initSiteCreation();
      return loadMap(angular.element($('.g-maps'))[0]);
    }, function(error) {
      return window.location = '#/404';
    });
    initSiteCreation = function() {
      return $scope.displaySteps = true;
    };
    loadMap = function(mapDiv) {
      map = protocolesFactory(mapDiv, $scope.site.protocole.type_site, siteCallbacks($scope, $timeout));
      return map.loadMapEdit($scope.site);
    };
    return $scope.save = function() {
      var base, payload;
      if (!map.isValid()) {
        if (typeof (base = $scope.saveDone).end === "function") {
          base.end();
        }
        return;
      }
      payload = {
        'commentaire': $scope.site.commentaire,
        'verrouille': $scope.site.verrouille
      };
      if ($scope.site.titre !== $scope.site_orig.titre) {
        payload.titre = $scope.site.titre;
      }
      if ($scope.protocole.type_site === 'ROUTIER') {
        payload.tracet = map.getGeoJsonRoute();
      }
      if ($scope.isAdmin) {
        payload.observateur = $scope.site.observateur._id;
      }
      return site.patch(payload).then(function(site) {
        var callbacks;
        callbacks = {
          onSaveLocalitiesSuccess: function() {
            return window.location = '#/sites/' + site._id;
          },
          onSaveLocalitiesFail: function() {
            var base1;
            $scope.saveLocalitiesError = true;
            return typeof (base1 = $scope.saveDone).end === "function" ? base1.end() : void 0;
          }
        };
        return saveLocalities(site, callbacks);
      }, function(error) {
        var base1;
        $scope.mapError = {
          message: extractSiteSaveError(error)
        };
        return typeof (base1 = $scope.saveDone).end === "function" ? base1.end() : void 0;
      });
    };
  });

}).call(this);
