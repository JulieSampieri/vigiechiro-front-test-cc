// Generated by CoffeeScript 1.12.7
(function() {
  'use strict';
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  angular.module('protocole_map_point_fixe', []).factory('ProtocoleMapPointFixe', function($rootScope, Backend, GoogleMaps, ProtocoleMap) {
    var ProtocoleMapPointFixe;
    return ProtocoleMapPointFixe = (function(superClass) {
      extend(ProtocoleMapPointFixe, superClass);

      function ProtocoleMapPointFixe(mapDiv, typeProtocole, callbacks) {
        this.typeProtocole = typeProtocole;
        this.callbacks = callbacks;
        this.validNumeroGrille = bind(this.validNumeroGrille, this);
        this.saveOverlay = bind(this.saveOverlay, this);
        ProtocoleMapPointFixe.__super__.constructor.call(this, mapDiv, this.typeProtocole, this.callbacks);
        this._min = 1;
        this._distanceOfInterest = 40;
        this._smallGrille = [];
        this._steps = [
          {
            id: 'start',
            message: "Positionner la zone de sélection aléatoire."
          }, {
            id: 'selectGrilleStoc',
            message: "Cliquer sur la carte pour sélection la grille stoc correspondante."
          }, {
            id: 'editLocalities',
            message: "Définir au moins 1 point à l'intérieur du carré."
          }, {
            id: 'validLocalities',
            message: "Valider les points."
          }, {
            id: 'end',
            message: "Cartographie achevée."
          }
        ];
        this._googleMaps.setDrawingManagerOptions({
          drawingControlOptions: {
            position: google.maps.ControlPosition.TOP_CENTER,
            drawingModes: [google.maps.drawing.OverlayType.MARKER]
          }
        });
        this._googleMaps.setDrawingManagerOptions({
          drawingControl: false
        });
      }

      ProtocoleMapPointFixe.prototype.mapCallback = function() {
        return {
          onProjectionReady: (function(_this) {
            return function() {
              _this._projectionReady = true;
              return _this.loadMapEditContinue();
            };
          })(this),
          overlayCreated: (function(_this) {
            return function(overlay) {
              var base, isModified;
              isModified = false;
              if (_this._step === 'selectGrilleStoc') {
                _this.getGrilleStoc(overlay);
                return false;
              } else {
                if (overlay.type === "Point") {
                  if (_this._googleMaps.isPointInPolygon(overlay, _this._grilleStoc.overlay)) {
                    isModified = true;
                  }
                } else {
                  if (typeof (base = _this.callbacks).displayError === "function") {
                    base.displayError("Mauvaise forme : " + overlay.type);
                  }
                }
                if (isModified) {
                  _this.saveOverlay(overlay);
                  _this.addEventRightClick(overlay);
                  _this.addEventDragEnd(overlay);
                  if (_this._isOpportuniste) {
                    _this._step = 'validLocalities';
                  } else {
                    if (_this.getCountOverlays() >= _this._min) {
                      _this._step = 'validLocalities';
                    } else {
                      _this._step = 'editLocalities';
                    }
                  }
                  _this.updateSite();
                  return true;
                }
                return false;
              }
            };
          })(this)
        };
      };

      ProtocoleMapPointFixe.prototype.saveOverlay = function(overlay) {
        var locality;
        locality = {};
        locality.overlay = overlay;
        locality.representatif = false;
        overlay.title = this.setLocalityNameWithInterest(overlay);
        overlay.infowindow = this._googleMaps.createInfoWindow(overlay.title);
        overlay.infowindow.open(this._googleMaps.getMap(), overlay);
        return this._localities.push(locality);
      };

      ProtocoleMapPointFixe.prototype.setLocalityNameWithInterest = function(overlay) {
        var circle, distance, interestPoint, k, len, name, position, ref;
        interestPoint = false;
        name = '';
        position = overlay.getPosition();
        ref = this._smallGrille || [];
        for (k = 0, len = ref.length; k < len; k++) {
          circle = ref[k];
          distance = this._googleMaps.computeDistanceBetween(circle.getCenter(), position);
          if (distance <= this._distanceOfInterest) {
            interestPoint = true;
            name = circle.name;
            break;
          }
        }
        if (interestPoint) {
          return name;
        } else {
          return this.setLocalityName();
        }
      };

      ProtocoleMapPointFixe.prototype.setLocalityName = function(name) {
        var k, l, len, len1, locality, ref, ref1;
        if (name == null) {
          name = 1;
        }
        if (this._isOpportuniste) {
          ref = this._fixLocalities;
          for (k = 0, len = ref.length; k < len; k++) {
            locality = ref[k];
            if (locality.overlay.title === 'Z' + name) {
              return this.setLocalityName(name + 1);
            }
          }
        }
        ref1 = this._localities;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          locality = ref1[l];
          if (locality.overlay.title === 'Z' + name) {
            return this.setLocalityName(name + 1);
          }
        }
        return 'Z' + name;
      };

      ProtocoleMapPointFixe.prototype.renameLocality = function(overlay, latLng) {
        var circle, distance, interestPoint, k, len, ref;
        interestPoint = false;
        ref = this._smallGrille || [];
        for (k = 0, len = ref.length; k < len; k++) {
          circle = ref[k];
          distance = this._googleMaps.computeDistanceBetween(circle.getCenter(), latLng);
          if (distance <= this._distanceOfInterest) {
            interestPoint = true;
            overlay.title = circle.name;
            break;
          }
        }
        if (!interestPoint) {
          if (overlay.title.charAt(0) === "Z") {
            return;
          } else {
            overlay.title = this.setLocalityName();
          }
        }
        return overlay.infowindow.setContent(overlay.title);
      };

      ProtocoleMapPointFixe.prototype.validNumeroGrille = function(cell, numero, id, editable) {
        var lat, lng, path;
        if (editable == null) {
          editable = false;
        }
        this._googleMaps.clearListeners(this._googleMaps.getMap(), 'click');
        cell.setOptions({
          strokeColor: '#00E000',
          strokeOpacity: 1,
          strokeWeight: 2,
          fillColor: '#000000',
          fillOpacity: 0
        });
        path = cell.getPath();
        this._grilleStoc = {
          overlay: cell,
          numero: numero,
          id: id
        };
        lat = (path.getAt(0).lat() + path.getAt(2).lat()) / 2;
        lng = (path.getAt(0).lng() + path.getAt(2).lng()) / 2;
        this._googleMaps.setCenter(lat, lng);
        this._googleMaps.setZoom(13);
        this._googleMaps.setDrawingManagerOptions({
          drawingControl: true
        });
        if (editable) {
          this._googleMaps.addListener(this._grilleStoc.overlay, 'rightclick', (function(_this) {
            return function(e) {
              var k, len, localite, ref;
              if (confirm("Cette opération supprimera tous les points.")) {
                _this._step = 'start';
                _this._grilleStoc.overlay.setMap(null);
                _this._grilleStoc = {};
                ref = _this._localities || [];
                for (k = 0, len = ref.length; k < len; k++) {
                  localite = ref[k];
                  _this._googleMaps.deleteOverlay(localite.overlay);
                }
                _this._localities = [];
                _this._googleMaps.setDrawingManagerOptions({
                  drawingControl: false
                });
                _this.selectGrilleStoc();
                return _this.updateSite();
              }
            };
          })(this));
        }
        this.displaySmallGrille();
        this._step = 'editLocalities';
        return this.updateSite();
      };

      ProtocoleMapPointFixe.prototype.displaySmallGrille = function() {
        var center, circle, i, j, k, l, len, m, n, nw, o, p, p1, p2, path, ref, small;
        ref = this._smallGrille || [];
        for (k = 0, len = ref.length; k < len; k++) {
          small = ref[k];
          small.setMap(null);
        }
        this._smallGrille = [];
        if ((this._grilleStoc == null) || (this._grilleStoc.overlay == null)) {
          return;
        }
        p1 = this._grilleStoc.overlay.getPath().getAt(0);
        p2 = this._grilleStoc.overlay.getPath().getAt(2);
        center = this._googleMaps.interpolate(p1, p2, 0.5);
        nw = this._googleMaps.computeOffset(center, 1000 * Math.sqrt(2), -45);
        p = [];
        p[0] = [];
        for (i = l = 0; l <= 4; i = ++l) {
          p[i] = [];
          if (i === 0) {
            p[0][0] = nw;
          } else {
            p[i][0] = this._googleMaps.computeOffset(p[i - 1][0], 500, 180);
          }
          for (j = m = 1; m <= 4; j = ++m) {
            p[i][j] = this._googleMaps.computeOffset(p[i][j - 1], 500, 90);
          }
        }
        for (i = n = 0; n <= 3; i = ++n) {
          for (j = o = 0; o <= 3; j = ++o) {
            path = [p[i][j], p[i + 1][j], p[i + 1][j + 1], p[i][j + 1]];
            center = this._googleMaps.interpolate(path[0], path[2], 0.5);
            circle = this._googleMaps.createCircle(center, this._distanceOfInterest, false, false);
            circle.setOptions({
              fillOpacity: 0,
              fillColor: '#000000',
              strokeWeight: 2,
              strokeOpacity: 0.6,
              strokeColor: '#000000'
            });
            this._smallGrille.push(circle);
          }
        }
        this._smallGrille[0].name = 'A1';
        this._smallGrille[1].name = 'A2';
        this._smallGrille[2].name = 'B1';
        this._smallGrille[3].name = 'B2';
        this._smallGrille[4].name = 'C2';
        this._smallGrille[5].name = 'C1';
        this._smallGrille[6].name = 'D2';
        this._smallGrille[7].name = 'D1';
        this._smallGrille[8].name = 'E1';
        this._smallGrille[9].name = 'E2';
        this._smallGrille[10].name = 'F1';
        this._smallGrille[11].name = 'F2';
        this._smallGrille[12].name = 'G2';
        this._smallGrille[13].name = 'G1';
        this._smallGrille[14].name = 'H2';
        return this._smallGrille[15].name = 'H1';
      };

      return ProtocoleMapPointFixe;

    })(ProtocoleMap);
  });

}).call(this);
