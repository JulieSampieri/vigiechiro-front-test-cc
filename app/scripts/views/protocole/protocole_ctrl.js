// Generated by CoffeeScript 1.12.7
(function() {
  'use strict';
  var breadcrumbsGetProtocoleDefer, make_payload, make_payload_macro;

  breadcrumbsGetProtocoleDefer = void 0;

  make_payload_macro = function($scope) {
    var payload;
    return payload = {
      'titre': $scope.protocoleForm.titre.$modelValue,
      'description': $scope.protocole.description,
      'macro_protocole': $scope.protocole.macro_protocole
    };
  };

  make_payload = function($scope) {
    var payload;
    payload = make_payload_macro($scope);
    payload.type_site = $scope.protocole.type_site;
    payload.taxon = $scope.protocole.taxon._id;
    payload.autojoin = $scope.protocole.autojoin;
    return payload;
  };

  angular.module('protocoleViews', ['ngRoute', 'textAngular', 'ui.select', 'ngSanitize', 'xin_listResource', 'xin_backend', 'xin_session', 'xin_tools', 'displaySiteViews']).config(function($routeProvider) {
    return $routeProvider.when('/protocoles', {
      templateUrl: 'scripts/views/protocole/list_protocoles.html',
      controller: 'ListProtocolesController',
      breadcrumbs: 'Protocoles'
    }).when('/protocoles/mes-protocoles', {
      templateUrl: 'scripts/views/protocole/list_protocoles.html',
      controller: 'ListMesProtocolesController',
      breadcrumbs: 'Mes Protocoles'
    }).when('/protocoles/nouveau', {
      templateUrl: 'scripts/views/protocole/edit_protocole.html',
      controller: 'CreateProtocoleController',
      breadcrumbs: 'Nouveau Protocole'
    }).when('/protocoles/:protocoleId', {
      templateUrl: 'scripts/views/protocole/display_protocole.html',
      controller: 'DisplayProtocoleController',
      breadcrumbs: ngInject(function($q) {
        var breadcrumbsDefer;
        breadcrumbsDefer = $q.defer();
        breadcrumbsGetProtocoleDefer = $q.defer();
        breadcrumbsGetProtocoleDefer.promise.then(function(protocole) {
          return breadcrumbsDefer.resolve([['Protocoles', '#/protocoles'], [protocole.titre, '#/protocoles/' + protocole._id]]);
        });
        return breadcrumbsDefer.promise;
      })
    }).when('/protocoles/:protocoleId/edition', {
      templateUrl: 'scripts/views/protocole/edit_protocole.html',
      controller: 'EditProtocoleController',
      breadcrumbs: ngInject(function($q) {
        var breadcrumbsDefer;
        breadcrumbsDefer = $q.defer();
        breadcrumbsGetProtocoleDefer = $q.defer();
        breadcrumbsGetProtocoleDefer.promise.then(function(protocole) {
          return breadcrumbsDefer.resolve([['Protocoles', '#/protocoles'], [protocole.titre, '#/protocoles/' + protocole._id], ['Ã‰dition', '#/protocoles/' + protocole._id + '/edition']]);
        });
        return breadcrumbsDefer.promise;
      })
    });
  }).controller('ListProtocolesController', function($scope, $q, $location, Backend, session, DelayedEvent) {
    var delayedFilter, resourceBackend_getList, userProtocolesDictDefer;
    $scope.lookup = {};
    $scope.title = "Tous les protocoles";
    $scope.swap = {
      title: "Voir mes protocoles",
      value: "/mes-protocoles"
    };
    delayedFilter = new DelayedEvent(500);
    session.getIsAdminPromise().then(function(isAdmin) {
      return $scope.isAdmin = isAdmin;
    });
    $scope.filterField = '';
    $scope.$watch('filterField', function(filterValue) {
      return delayedFilter.triggerEvent(function() {
        if ((filterValue != null) && filterValue !== '') {
          return $scope.lookup.q = filterValue;
        } else if ($scope.lookup.q != null) {
          return delete $scope.lookup.q;
        }
      });
    });
    $scope.resourceBackend = Backend.all('protocoles');
    resourceBackend_getList = $scope.resourceBackend.getList;
    userProtocolesDictDefer = $q.defer();
    session.getUserPromise().then(function(user) {
      var i, len, ref, userProtocole, userProtocolesDict;
      userProtocolesDict = {};
      ref = user.protocoles || [];
      for (i = 0, len = ref.length; i < len; i++) {
        userProtocole = ref[i];
        userProtocolesDict[userProtocole.protocole._id] = userProtocole;
      }
      return userProtocolesDictDefer.resolve(userProtocolesDict);
    });
    return $scope.resourceBackend.getList = function(lookup) {
      var deferred;
      deferred = $q.defer();
      userProtocolesDictDefer.promise.then(function(userProtocolesDict) {
        return resourceBackend_getList(lookup).then(function(protocoles) {
          var i, len, protocole;
          for (i = 0, len = protocoles.length; i < len; i++) {
            protocole = protocoles[i];
            if (userProtocolesDict[protocole._id] != null) {
              if (userProtocolesDict[protocole._id].valide) {
                protocole._status_registered = true;
              } else {
                protocole._status_toValidate = true;
              }
            }
          }
          return deferred.resolve(protocoles);
        });
      });
      return deferred.promise;
    };
  }).controller('ListMesProtocolesController', function($scope, $q, $location, Backend, session, DelayedEvent) {
    var delayedFilter, resourceBackend_getList, userProtocolesDictDefer;
    $scope.lookup = {};
    $scope.title = "Mes protocoles";
    $scope.swap = {
      title: "Voir tous les protocoles",
      value: ''
    };
    delayedFilter = new DelayedEvent(500);
    $scope.filterField = '';
    $scope.$watch('filterField', function(filterValue) {
      return delayedFilter.triggerEvent(function() {
        if ((filterValue != null) && filterValue !== '') {
          return $scope.lookup.q = filterValue;
        } else if ($scope.lookup.q != null) {
          return delete $scope.lookup.q;
        }
      });
    });
    $scope.resourceBackend = Backend.all('moi/protocoles');
    resourceBackend_getList = $scope.resourceBackend.getList;
    userProtocolesDictDefer = $q.defer();
    session.getUserPromise().then(function(user) {
      var i, len, ref, userProtocole, userProtocolesDict;
      userProtocolesDict = {};
      ref = user.protocoles || [];
      for (i = 0, len = ref.length; i < len; i++) {
        userProtocole = ref[i];
        userProtocolesDict[userProtocole.protocole._id] = userProtocole;
      }
      return userProtocolesDictDefer.resolve(userProtocolesDict);
    });
    return $scope.resourceBackend.getList = function(lookup) {
      var deferred;
      deferred = $q.defer();
      userProtocolesDictDefer.promise.then(function(userProtocolesDict) {
        return resourceBackend_getList(lookup).then(function(protocoles) {
          var i, len, protocole;
          for (i = 0, len = protocoles.length; i < len; i++) {
            protocole = protocoles[i];
            if (userProtocolesDict[protocole._id] != null) {
              if (userProtocolesDict[protocole._id].valide) {
                protocole._status_registered = true;
              } else {
                protocole._status_toValidate = true;
              }
            }
          }
          return deferred.resolve(protocoles);
        });
      });
      return deferred.promise;
    };
  }).controller('DisplayProtocoleController', function($route, $routeParams, $scope, Backend, session) {
    $scope.protocole = {};
    $scope.userRegistered = false;
    session.getUserPromise().then(function(user) {
      $scope.user = user.plain();
      return Backend.one('protocoles', $routeParams.protocoleId).get().then(function(protocole) {
        var i, len, ref, results;
        if (breadcrumbsGetProtocoleDefer != null) {
          breadcrumbsGetProtocoleDefer.resolve(protocole);
          breadcrumbsGetProtocoleDefer = void 0;
        }
        $scope.protocole = protocole;
        ref = $scope.user.protocoles || [];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          protocole = ref[i];
          if (protocole.protocole._id === $scope.protocole._id) {
            $scope.userRegistered = true;
            break;
          } else {
            results.push(void 0);
          }
        }
        return results;
      }, function(error) {
        return window.location = '#/404';
      });
    });
    return $scope.registerProtocole = function() {
      return Backend.one('moi/protocoles/' + $scope.protocole._id).put().then(function(response) {
        session.refreshPromise();
        return $route.reload();
      }, function(error) {
        throw error;
      });
    };
  }).controller('EditProtocoleController', function($route, $routeParams, $scope, Backend) {
    var protocoleResource;
    $scope.submitted = false;
    $scope.protocole = {};
    $scope.taxons = [];
    protocoleResource = void 0;
    $scope.protocoleId = $routeParams.protocoleId;
    Backend.all('taxons').getList().then(function(taxons) {
      return $scope.taxons = taxons.plain();
    });
    Backend.one('protocoles', $routeParams.protocoleId).get().then(function(protocole) {
      if (breadcrumbsGetProtocoleDefer != null) {
        breadcrumbsGetProtocoleDefer.resolve(protocole);
        breadcrumbsGetProtocoleDefer = void 0;
      }
      protocoleResource = protocole;
      return $scope.protocole = protocole.plain();
    }, function(error) {
      return window.location = '#/404';
    });
    return $scope.saveProtocole = function() {
      var payload;
      $scope.submitted = true;
      if (!$scope.protocoleForm.$valid || !$scope.protocoleForm.$dirty || (protocoleResource == null)) {
        return;
      }
      payload = null;
      if ($scope.protocole.macro_protocole) {
        payload = make_payload_macro($scope);
      } else {
        payload = make_payload($scope);
      }
      return protocoleResource.patch(payload).then(function() {
        return $route.reload();
      }, function(error) {
        throw error;
      });
    };
  }).controller('CreateProtocoleController', function($scope, session, Backend) {
    $scope.submitted = false;
    $scope.protocole = {};
    $scope.configuration_participation = {};
    $scope.taxons = [];
    Backend.all('taxons').all('liste').getList().then(function(taxons) {
      return $scope.taxons = taxons.plain();
    });
    return $scope.saveProtocole = function() {
      var payload;
      $scope.submitted = true;
      if (!$scope.protocoleForm.$valid || !$scope.protocoleForm.$dirty) {
        return;
      }
      payload = null;
      if ($scope.protocole.macro_protocole) {
        payload = make_payload_macro($scope);
      } else {
        payload = make_payload($scope);
      }
      return Backend.all('protocoles').post(payload).then(function(protocole) {
        return Backend.one('moi/protocoles/' + protocole._id).customPUT().then(function() {
          session.refreshPromise();
          return window.location = '#/protocoles/' + protocole._id;
        }, function(error) {
          throw error;
        });
      }, function(error) {
        throw error;
      });
    };
  });

}).call(this);
